Network
-두대 이상의 컴퓨터를 연결하는 것
-클라이언트와 서버의 연결
    -클라이언트 : 사용자가 볼 수 있는 기기(N개)
    -서버 : 사용자가 볼 수 없는 기기(1개)
-네트워크가 필요한 이유
    -클라이언트(앱) > (internet) > 서버 : 요청(내가 지금 첫 화면을 그리려고하는데 데이터 좀 줘)
    -서버 > (internet) > 클라이언트(앱) : 응답(화면을 그릴 수 있는 데이터가 도착
    클라이언트 Request(요청) > 서버가 response(응답)을 보낸다
-대부분의 앱들이 정보를 서버로부터 받아서 화면을 구성한다. 문제점은??
    -매번 똑같은 화면을 그리는데 매번 요청을 하면 >>낭비임
    -해결책 : 캐싱
        -한번 받은 데이터를 클라이언트가 로컬 데이터베이스에 저장하고
        다시 필요한 경우에 서버에게 요청하는 것이 아니라 로컬 데이터베이스에 있는 데이터를 이용해서 그린다
    > 캐싱은 구현 난이도가 높다
-네트워킹
    -서버와 클라이언트의 의사소통임
    -네트워크 약속(프로토콜) 존재한다
네트워크 프로토콜(규약)
-FTP > 파일 전송 규약
-SMTP > 메일 전송 규약
-HTTP > 인터넷 서비스 규약

Request(클라이언트가 서버에게 보내는 요청)
Request Header
    -요청에 대한 추가 정보
Request Body
    -JSON 형태로 보낸다
    -추가요청
Request Method
    -PUT,GET,POST
Response(서버가 클라이언트에게 보내는 응답)
Response Code
    -응답의 요약
    -200번대면 성공
    -400번대면오류 404 니가보낸주소없다
    -500번대면 서버오류
Response

JSON
    -{}  객체표현
    -[] 배열표현
    -키 -벨류
    -데이터를 주고받는 형태,형식임
    -서버한테 보낼때도 JSON형태 받을때도 JSON형태
    -문자열타입
    -숫자(정수,소수)타입
    -객체타입
    -배열타입
    -불린타입
    -널타입
    -example
        {}가 하나의 객체라는것
        {
            "id" : 1,
            "name" : "홍길동",
            "phone" : null,
            "key" : [1,2,3,4,5]
        }
Serializing(Serializer)
-꼬챙이로 객체를 담는다
-학생 객체 (이름,번호,나이)
-객체를 전송을 위한 데이터 포맷(형태)로 바꿔준다
클라이언트 ----- > Serializing-----> 서버

HttpURLConnection
-안드로이드에서 기본으로 제공해주는 네트워크 모듈
-매우 번거로움
HttpURLConnectio의 사용을 편하게 만들어주는 라이브러리
-Volly
-Retrofit
-OKHttp
-기타등등

